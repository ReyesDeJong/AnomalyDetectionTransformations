"""
ZTF stamps outlier loader

It loads pickles that are generated by thesis_ztf.py

Data is already preprocessed and 21x21

loaded pickle are of format
dataset_dict = {
    general_keys.TRAIN: {general_keys.IMAGES: x_train,
                         general_keys.LABELS: y_train,
                         general_keys.OUTLIER_LABELS: np.ones_like(
                             y_train)},
    general_keys.VALIDATION: {general_keys.IMAGES: x_val,
                              general_keys.LABELS: y_val,
                              general_keys.OUTLIER_LABELS: np.ones_like(
                                  y_val)},
    general_keys.TEST: {general_keys.IMAGES: x_test,
                        general_keys.LABELS: y_test,
                        general_keys.OUTLIER_LABELS:
                            y_test_01_outlier_labels},
}
"""

import os
import sys

import pandas as pd

PROJECT_PATH = os.path.abspath(
    os.path.join(os.path.dirname(__file__), '..', '..'))
sys.path.append(PROJECT_PATH)

from modules.data_loaders.ztf_small_outlier_loader import ZTFSmallOutlierLoader
from parameters import general_keys, loader_keys


class ZTFOutlierLoaderv2(ZTFSmallOutlierLoader):

    def __init__(self, params: dict, dataset_name='ztfv2',
        pickles_usage=True):
        # super().__init__(params, dataset_name, pickles_usage)
        self.data_path = params[loader_keys.DATA_PATH]
        self.name = dataset_name

    def get_outlier_detection_datasets(self):
        datasets_dict = pd.read_pickle(self.data_path)
        x_train = datasets_dict[general_keys.TRAIN][general_keys.IMAGES]
        y_train = datasets_dict[general_keys.TRAIN][general_keys.OUTLIER_LABELS]
        x_val = datasets_dict[general_keys.VALIDATION][general_keys.IMAGES]
        y_val = datasets_dict[general_keys.VALIDATION][
            general_keys.OUTLIER_LABELS]
        x_test = datasets_dict[general_keys.TEST][general_keys.IMAGES]
        y_test = datasets_dict[general_keys.TEST][general_keys.OUTLIER_LABELS]
        sets_tuple = ((x_train, y_train), (x_val, y_val), (x_test, y_test))
        return sets_tuple
